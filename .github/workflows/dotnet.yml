name: .NET CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build, Test, and Sonar Analysis
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./Source/Back-end

    steps:
      # Step 1: Set up JDK 17 (required for SonarCloud)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # Step 2: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 3: Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: dotnet restore osu.sln

      # Step 5: Run Sonar Scanner Begin
      - name: Run SonarScanner Begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin 
            /k:"TestProjectKeySchool" 
            /o:"ipipboy029" 
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" 
            /d:sonar.host.url="https://sonarcloud.io" 
            /d:sonar.cs.vscoveragexml.reportsPaths="./TestResults/Cobertura/coverage.sonarqube.xml" 
            /d:sonar.scanner.scanAll=false

      # Step 6: Build the solution
      - name: Build solution
        run: dotnet build osu.sln --no-restore --configuration Release

      # Step 7: Build solution (explicit Debug build)
      - name: Build solution (Debug)
        run: dotnet build osu.sln --configuration Debug --no-restore

      # Step 8: Run tests with coverage
      - name: Run tests and collect coverage (Cobertura format)
        run: |
          dotnet add package coverlet.collector
          dotnet test osu.sln --configuration Debug --no-build \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --logger "trx;LogFileName=test_results.trx"

      # Step 9: Debug - List TestResults directory
      - name: Debug TestResults directory (Post-Test)
        run: |
          echo "Searching for coverage files in TestResults directory..."
          Get-ChildItem -Path ./TestResults -Recurse

      # Step 10: Install ReportGenerator
      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      # Step 11: Generate Cobertura format and rename output
      - name: Generate Cobertura report
        run: |
          echo "Generating Cobertura report from coverage files..."
          reportgenerator -reports:"./TestResults/**/coverage.cobertura.xml" \
            -targetdir:"./TestResults/Cobertura" \
            -reporttypes:Cobertura
          echo "Renaming Cobertura.xml to coverage.sonarqube.xml..."
          mv ./TestResults/Cobertura/Cobertura.xml ./TestResults/Cobertura/coverage.sonarqube.xml

      # Step 12: Debug - Verify renamed Cobertura report
      - name: Debug Cobertura directory
        run: |
          echo "Listing contents of Cobertura directory..."
          dir ./TestResults/Cobertura

      # Step 13: Display contents of Cobertura report
      - name: Display Cobertura report content
        run: |
          echo "Displaying Cobertura report content..."
          cat ./TestResults/Cobertura/coverage.sonarqube.xml
        continue-on-error: true

      # Step 14: Run Sonar Scanner End
      - name: Run SonarScanner End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  deploy:
    name: Deploy with Watchtower
    runs-on: ubuntu-latest
    steps:
      - name: Pull and deploy using Watchtower
        run: |
          docker run -d --name watchtower \
          -v /var/run/docker.sock:/var/run/docker.sock \
          containrrr/watchtower --interval 300 --cleanup
