name: .NET CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build, Test, and Sonar Analysis
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./Source/Back-end

    steps:
      # Step 1: Set up JDK 17 (required for SonarCloud)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # Step 2: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 3: Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: dotnet restore osu.sln

      # Step 5: Run SonarScanner Begin
      - name: Run SonarScanner Begin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"TestProjectKeySchool" /o:"ipipboy029" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths="./TestResults/Cobertura/coverage.sonarqube.xml"

      # Step 6: Run tests and collect coverage
      - name: Run tests and collect coverage
        run: |
          dotnet test osu.sln --no-build --collect:"Code Coverage" --results-directory ./TestResults --logger "trx;LogFileName=test_results.trx"
        continue-on-error: true

      # Step 7: Debug TestResults directory (make sure the .trx files are created)
      - name: Debug - List TestResults directory
        run: dir ./TestResults

      # Step 8: Install ReportGenerator
      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      # Step 9: Generate Cobertura format
      - name: Generate Cobertura format
        run: |
          mkdir -p ./TestResults/Cobertura
          reportgenerator "-reports:./TestResults/*.trx" "-targetdir:./TestResults/Cobertura" -reporttypes:Cobertura || echo "ReportGenerator failed"
        continue-on-error: true

      # Step 10: Debug Cobertura directory (ensure the Cobertura report is generated)
      - name: Debug - Verify Cobertura directory
        run: |
          echo "Listing files in ./TestResults/Cobertura"
          dir ./TestResults/Cobertura

      # Step 11: Display contents of Cobertura report
      - name: Display contents of Cobertura report
        run: |
          echo "Displaying Cobertura report content"
          cat ./TestResults/Cobertura/coverage.sonarqube.xml
        continue-on-error: true

      # Step 12: Run SonarScanner End
      - name: Run SonarScanner End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  deploy:
    name: Deploy with Watchtower
    runs-on: ubuntu-latest
    steps:
      - name: Pull and deploy using Watchtower
        run: |
          docker run -d --name watchtower \
          -v /var/run/docker.sock:/var/run/docker.sock \
          containrrr/watchtower --interval 300 --cleanup
