name: .NET CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build, Test, and Sonar Analysis
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./Source/Back-end

    steps:
      # Step 1: Set up JDK 17 (required for SonarCloud)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # Step 2: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 3: Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: dotnet restore osu.sln

      # Step 5: Run SonarScanner Begin
      - name: Run SonarScanner Begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"TestProjectKeySchool" /o:"ipipboy029" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="./TestResults/**/coverage.opencover.xml"

      # Step 6: Build the solution (explicit build step before tests)
      - name: Build solution
        run: dotnet build osu.sln --configuration Debug --no-restore

      # Step 7: Run tests and collect coverage
      - name: Run tests and collect coverage
        run: dotnet test osu.sln --configuration Debug --collect:"XPlat Code Coverage" --results-directory ./TestResults --logger "trx;LogFileName=test_results.trx"

      # Step 8: Debug - Check generated coverage report
      - name: Debug - List TestResults directory
        run: |
          echo "Checking TestResults directory..."
          dir ./TestResults

      # Step 9: Install ReportGenerator
      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      # Step 10: Ensure .NET tools are in PATH
      - name: Add .NET tools to PATH
        shell: powershell
        run: |
          $Env:PATH += ";$Env:USERPROFILE\.dotnet\tools"

      # Step 11: Generate SonarQube compatible coverage report
      - name: Generate SonarQube compatible coverage report
        run: reportgenerator -reports:./TestResults/**/coverage.opencover.xml -targetdir:./TestResults/Cobertura -reporttypes:SonarQube

      # Step 12: Debug - Verify Cobertura report
      - name: Debug - Verify Cobertura report
        run: |
          echo "Checking TestResults directory..."
          dir ./TestResults
          echo "Checking Cobertura directory..."
          dir ./TestResults/Cobertura
          echo "Listing coverage file..."
          dir ./TestResults/Cobertura/coverage.opencover.xml

      # Step 13: Run SonarScanner End
      - name: Run SonarScanner End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  deploy:
      name: Deploy with Watchtower
      runs-on: ubuntu-latest
      steps:
        - name: Pull and deploy using Watchtower
          run: |
            docker run -d --name watchtower \
            -v /var/run/docker.sock:/var/run/docker.sock \
            containrrr/watchtower --interval 300 --cleanup
