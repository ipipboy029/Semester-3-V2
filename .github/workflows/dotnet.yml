name: .NET CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build, Test, and Sonar Analysis
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./Source/Back-end

    steps:
      # Step 1: Set up JDK 17 (required for SonarCloud)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # Step 2: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 3: Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: dotnet restore osu.sln

      - name: Run SonarScanner Begin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet-sonarscanner begin `
          /k:"TestProjectKeySchool" `
          /o:"ipipboy029" `
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" `
          /d:sonar.host.url="https://sonarcloud.io" `
          /d:sonar.cs.opencover.reportsPaths="./TestResults/OpenCover/coverage.opencover.xml"

      # Step 6: Build the solution
      - name: Build solution
        run: dotnet build osu.sln --configuration Release

      # Step 7: Run tests with XPlat Code Coverage
      - name: Run tests and collect coverage
        run: |
          dotnet test osu.sln --collect:"XPlat Code Coverage" --results-directory ./TestResults --logger "trx;LogFileName=test_results.trx"

      - name: Generate OpenCover format
        run: |
          mkdir -p ./TestResults/OpenCover
          reportgenerator "-reports:./TestResults/*.trx" "-targetdir:./TestResults/OpenCover" -reporttypes:"Cobertura;SonarQube"
        continue-on-error: true

      # Step 9: Debug OpenCover Directory
      - name: Debug OpenCover Directory
        run: |
          echo "Contents of OpenCover directory:"
          dir ./TestResults/OpenCover
          echo "Contents of OpenCover file:"
          cat ./TestResults/OpenCover/coverage.opencover.xml

      # Step 10: Run Sonar Scanner End
      - name: Run SonarScanner End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
