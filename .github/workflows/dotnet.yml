name: .NET

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build, test, and analyze
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./Source/Back-end
    steps:
      # Step 1: Set up JDK 17 (required for SonarCloud)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # Step 2: Checkout code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis relevancy

      # Step 3: Create sonar cache directory
      - name: Create sonar cache directory
        run: |
          mkdir -p ~/.sonar/cache

      # Step 4: Cache SonarQube Cloud packages
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Step 5: Cache SonarQube Cloud scanner
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # Step 6: Install SonarQube Cloud scanner
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      # Step 7: Start SonarScanner
      - name: Start SonarScanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"TestProjectKeySchool" /o:"ipipboy029" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths="./TestResults/Cobertura/coverage.sonarqube.xml" /d:sonar.scanner.scanAll=false

      # Step 8: Build and test the project
      - name: Build and test
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          dotnet restore ./osu.sln
          dotnet build ./osu.sln --no-restore
          dotnet test ./osu.sln --no-build --collect:"Code Coverage" --results-directory ./TestResults --logger "trx;LogFileName=test_results.trx"

      # Debug: List the files in the TestResults directory
      - name: List TestResults directory
        run: dir ./TestResults

      # Step 9: Install ReportGenerator (if needed)
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      # Step 10: Generate Cobertura format
      - name: Generate Cobertura format
        run: reportgenerator "-reports:./TestResults/*.trx" "-targetdir:./TestResults/Cobertura" -reporttypes:SonarQube

      # Debug: Verify Cobertura file
      - name: Verify Cobertura file
        run: dir ./TestResults/Cobertura

      # Step 11: End SonarScanner
      - name: End SonarScanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          # Step to list contents of TestResults directory for debugging
      - name: List TestResults directory
        run: dir ./TestResults

# Debug step to check the Cobertura directory
      - name: List Cobertura directory
        run: dir ./TestResults/Cobertura

# Debug step to verify the contents of the report generated
      - name: Verify the contents of the generated Cobertura report
        run: cat ./TestResults/Cobertura/coverage.sonarqube.xml

  deploy-watchtower:
    name: Deploy with Watchtower
    runs-on: ubuntu-latest  # Use a Linux runner here
    steps:
      - name: Run Watchtower
        run: |
          docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --interval 300 --cleanup
