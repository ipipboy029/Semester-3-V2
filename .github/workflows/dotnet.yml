name: .NET CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build, Test, and Sonar Analysis
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./Source/Back-end

    steps:
      # Step 1: Set up JDK 17 (required for SonarCloud)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # Step 2: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 3: Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: dotnet restore osu.sln

      # Step 5: Run SonarScanner Begin
      - name: Run SonarScanner Begin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet-sonarscanner begin `
            /k:"TestProjectKeySchool" `
            /o:"ipipboy029" `
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.opencover.reportsPaths="./TestResults/OpenCover/coverage.opencover.xml"

      # Step 6: Build solution
      - name: Build solution
        run: dotnet build osu.sln --configuration Release

      # Step 7: Run tests with Coverlet to collect OpenCover format code coverage
      - name: Run tests and collect OpenCover coverage
        run: |
          dotnet test osu.sln --logger "trx;LogFileName=test_results.trx" -- /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=./TestResults/OpenCover/

      # Step 8: List runsettings files (debugging step)
      - name: List runsettings files
        run: |
          echo "Looking for runsettings files..."
          dir **/*.runsettings

      # Step 9: Install ReportGenerator (only once)
      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      # Step 10: Generate OpenCover format using ReportGenerator
      - name: Generate OpenCover format
        run: |
          mkdir -p ./TestResults/OpenCover
          reportgenerator "-reports:./TestResults/OpenCover/coverage.opencover.xml" "-targetdir:./TestResults/OpenCover" -reporttypes:"OpenCover"

      # Step 11: Debug OpenCover Directory and Content
      - name: Verify OpenCover Directory and Content
        run: |
          echo "Contents of OpenCover directory:"
          dir ./TestResults/OpenCover
          echo "Contents of OpenCover file:"
          cat ./TestResults/OpenCover/coverage.opencover.xml
        continue-on-error: true

      # Step 12: Run SonarScanner End
      - name: Run SonarScanner End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        continue-on-error: true

  deploy:
    name: Deploy with Watchtower
    runs-on: ubuntu-latest
    steps:
      # Step 1: Pull and deploy using Watchtower
      - name: Pull and deploy using Watchtower
        run: |
          docker run -d --name watchtower \
          -v /var/run/docker.sock:/var/run/docker.sock \
          containrrr/watchtower --interval 300 --cleanup
