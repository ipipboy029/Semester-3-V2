name: .NET CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build, Test, and Sonar Analysis
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./Source/Back-end  # Adjusted to match your directory structure

    steps:
    
    # Step 1: Set up JDK 17 (required for SonarCloud)
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'

    # Step 2: Checkout code
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Step 3: Cache dependencies
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: ${{ runner.os }}-nuget-

    # Step 4: Install dependencies
    - name: Install dependencies
      run: dotnet restore osu.sln  # Adjusted for your solution file
      
    # Step 5: Build the project
    - name: Build the project
      run: dotnet build --configuration Release

    # Step 6: Install tools (Coverlet, SonarScanner, ReportGenerator)
    - name: Install Coverlet, SonarScanner, and ReportGenerator
      run: |
        dotnet tool install --global coverlet.console
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-reportgenerator-globaltool

    # Step 7: Verify the build output directory exists
    - name: Verify build output directory
      run: |
        if (Test-Path "Source/Back-end/bin/Release/net8.0") { Write-Host "Build output found." } else { Write-Host "Build output NOT found." }

    # Step 8: Run Tests with Coverage and Generate Cobertura Report
    - name: Run Tests with Coverage
      run: |
        dotnet test osu.sln \
          --no-build \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults
        ~/.dotnet/tools/reportgenerator \
          -reports:"TestResults/**/coverage.cobertura.xml" \
          -targetdir:"./CoverageReports" \
          -reporttypes:HtmlInline_AzurePipelines Html

    # Step 9: SonarQube Analysis Begin
    - name: SonarQube Analysis Begin
      run: |
        dotnet sonarscanner begin /k:"TestProjectKeySchool" \
          /o:"ipipboy029" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.cs.opencover.reportsPaths="TestResults/**/coverage.cobertura.xml" \
          /d:sonar.exclusions="**/bin/**,**/obj/**,**/TestResults/**,**/*.g.cs,**/*.Designer.cs" \
          /d:sonar.coverage.exclusions="**/TestResults/**"

    # Step 10: Build the solution (required for SonarCloud)
    - name: Run the build again (required for SonarCloud)
      run: dotnet build --configuration Release

    # Step 11: SonarQube Analysis End
    - name: SonarQube Analysis End
      run: |
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    # Step 12: Upload Coverage Report as an Artifact
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: CodeCoverageReport
        path: ./CoverageReports
        retention-days: 7

  deploy:
    name: Deploy with Watchtower
    runs-on: ubuntu-latest
    steps:
      - name: Pull and deploy using Watchtower
        run: |
          docker run -d --name watchtower \
          -v /var/run/docker.sock:/var/run/docker.sock \
          containrrr/watchtower --interval 300 --cleanup
