name: .NET

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build, test, and analyze
    runs-on: windows-latest

    steps:
      # Set up .NET SDK
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.x'  # Replace with the correct version

      # Checkout code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all history is checked out for SonarCloud

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Build the project
      - name: Build the project
        run: dotnet build --no-restore

      # Run tests and collect coverage
      - name: Run tests and collect coverage
        run: dotnet test --no-build --collect:"Code Coverage" --results-directory ./TestResults

      # Install ReportGenerator to convert trx to Cobertura
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      # Generate Cobertura format
      - name: Generate Cobertura format
        run: reportgenerator "-reports:./TestResults/*.trx" "-targetdir:./TestResults/Cobertura" -reporttypes:Cobertura

      # Analyze with SonarCloud
      - name: Analyze with SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"TestProjectKeySchool" /o:"ipipboy029" /d:sonar.cs.cobertura.reportsPaths="./TestResults/Cobertura/coverage.cobertura.xml"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  # Step 11: Deploy with Watchtower (on a Linux runner)
  deploy-watchtower:
    name: Deploy with Watchtower
    runs-on: ubuntu-latest  # Use a Linux runner here
    steps:
      - name: Run Watchtower
        run: |
          docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --interval 300 --cleanup
