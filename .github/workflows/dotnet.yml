name: .NET CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build, Test, and Analyze
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./Source/Back-end
    steps:
      # Step 1: Set up JDK 17 (required for SonarCloud)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # Step 2: Checkout code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full history is available for better analysis

      # Step 3: Create sonar cache directory
      - name: Create sonar cache directory
        run: |
          mkdir -p ~/.sonar/cache

      # Step 4: Cache SonarCloud scanner
      - name: Cache SonarCloud scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # Step 5: Install SonarCloud scanner if not cached
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      # Step 6: Start SonarCloud analysis
      - name: Start SonarCloud scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"TestProjectKeySchool" /o:"ipipboy029" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths="./TestResults/Cobertura/coverage.sonarqube.xml"

      # Step 7: Build and test the project
      - name: Build and test
        run: |
          dotnet restore osu.sln
          dotnet build osu.sln --no-restore
          dotnet test osu.sln --no-build --collect:"Code Coverage" --results-directory ./TestResults --logger "trx;LogFileName=test_results.trx"

      # Step 8: Debug - List TestResults directory
      - name: List TestResults directory
        run: dir ./TestResults

      # Step 9: Install ReportGenerator
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      # Step 10: Generate Cobertura format
      - name: Generate Cobertura format
        run: |
          mkdir -p ./TestResults/Cobertura
          reportgenerator "-reports:./TestResults/*.trx" "-targetdir:./TestResults/Cobertura" -reporttypes:Cobertura -verbosity:Detailed

      # Step 11: Debug - Verify Cobertura directory
      - name: Verify Cobertura directory
        run: dir ./TestResults/Cobertura

      # Step 12: Debug - Verify Cobertura report contents
      - name: Verify Cobertura report contents
        run: cat ./TestResults/Cobertura/coverage.sonarqube.xml

      # Step 13: End SonarCloud scanner
      - name: End SonarCloud scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: .\.sonar\scanner\dotnet-sonarscanner end

  deploy-watchtower:
    name: Deploy with Watchtower
    runs-on: ubuntu-latest
    steps:
      - name: Run Watchtower
        run: |
          docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --interval 300 --cleanup
